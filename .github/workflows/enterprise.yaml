name: Enterprise Workflow
on:
  pull_request:
    ignore-branches:
      - release
  push:
    branches:
      - release
      - master
env:
  SLACK_URL: ${{ secrets.SLACK_URL }}
  GIT_CONFIG_NAME: "Build Process"
  GIT_CONFIG_EMAIL: build@reviewable.io
  LAST_SHIPPABLE_RUN: 4638
  BRANCH: ${{ github.ref }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_URL }}
  BUILD_NUMBER: ${{ github.run_number }}
  REVIEWABLE_MIXPANEL_TOKEN: 47d8b419a2152fa04c255781d51c209e
  REVIEWABLE_HEADWAY_ACCOUNT: qJAvVy
  REVIEWABLE_STRIPE_PUBLISHABLE_KEY: pk_live_ih0FgRCAkYNrayIOV2vitb60
  REVIEWABLE_TERMS_URL: https://github.com/Reviewable/Reviewable/blob/master/legal/terms.md
  REVIEWABLE_PRIVACY_URL: https://github.com/Reviewable/Reviewable/blob/master/legal/privacy.md
  REVIEWABLE_CLIENT_SENTRY_DSN: https://1a7d50a470574294937db62e304cabbb@sentry.io/124660
jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      ####################################
      ##           on build             ##
      ####################################

      # IMPORANT: USE DOUBLEQUOTES (") WITHIN RUN BLOCKS

      # Bug in `act` tool causes git refs to assign with \\ as separators in windows environments
      # Bug: single quotes do not get intepreted correctly in if statements
      - name: Update git
        if: env.ACT
        run: |
          add-apt-repository -y ppa:git-core/ppa && apt -qq -y update && apt install -qq -y git
          git --version
      - uses: actions/checkout@v2
        with:
          token: ${{ env.GITHUB_TOKEN || github.token }}
      - name: Assign SHOULD_RELEASE
        run: |
          if [[ ${{ github.event_name }} != "pull_request" &&
              ($GITHUB_REF == "\\refs\\heads\\release" ||
              $GITHUB_REF == "refs/heads/release") ]]; then
            SHOULD_RELEASE=true;
          else
            SHOULD_RELEASE=false;
          fi
          echo "SHOULD_RELEASE=$SHOULD_RELEASE" >> $GITHUB_ENV

      - name: Assign SHOULD_DEPLOY_TEST
        run: |
          if [[ ${{ github.event_name }} != "pull_request" &&
              ($GITHUB_REF == "\\refs\\heads\\master" ||
              $GITHUB_REF == "refs/heads/master") ]]; then
            SHOULD_DEPLOY_TEST=true;
          else
            SHOULD_DEPLOY_TEST=false;
          fi
          echo "SHOULD_DEPLOY_TEST=$SHOULD_DEPLOY_TEST" >> $GITHUB_ENV

      - name: Get build versions
        id: versions
        run: |
          SERVER_VERSION=$(cat server_version)
          CLIENT_VERSION=$(cat client_version)
          MIN_SERVER_VERSION=$(cat min_server_version)
          MIN_CLIENT_VERSION=$(cat min_client_version)
          GHE_VERSION_RANGE="$(cat ghe_version_range)"
          echo $GHE_VERSION_RANGE
          echo "::set-output name=SERVER_VERSION::$SERVER_VERSION"
          echo "::set-output name=CLIENT_VERSION::$CLIENT_VERSION"
          echo "::set-output name=MIN_CLIENT_VERSION::$MIN_CLIENT_VERSION"
          echo "::set-output name=MIN_SERVER_VERSION::$MIN_SERVER_VERSION"
          echo "::set-output name=GHE_VERSION_RANGE::$GHE_VERSION_RANGE"

      - name: Assign BUILD_GROUP_NUMBER
        id: build_group_number
        run: |
          echo "${{ steps.versions.outputs.GHE_VERSION_RANGE }}"
          BUILD_GROUP_NUMBER=$(echo $(expr $BUILD_NUMBER + $LAST_SHIPPABLE_RUN) | sed 's/\..*//')
          echo "BUILD_GROUP_NUMBER=$BUILD_GROUP_NUMBER" >> $GITHUB_ENV
      - name: Assign PULL_REQUEST
        id: setpullrequest
        run: |
          PULL_REQUEST=$(cat $GITHUB_EVENT_PATH | jq -r ".pull_request.number")
          if [[ "$PULL_REQUEST" = "null" ]]; then PULL_REQUEST="false"; fi
          echo "PULL_REQUEST=$PULL_REQUEST" >> $GITHUB_ENV

      # REMOVE ME: when debugging is completed
      - name: Print info
        shell: bash
        run: |
          echo "Branch: $BRANCH; pull request: $PULL_REQUEST; build: $BUILD_GROUP_NUMBER"

      - name: Clone client repo
        uses: actions/checkout@v2
        with:
          repository: 'TEAMBLAWA/testing'
          path: 'reviewable-client'
          token: ${{ env.GITHUB_TOKEN || github.token }}
          ref: 'build-${{ steps.versions.outputs.CLIENT_VERSION }}'
      - name: Clone server repo
        uses: actions/checkout@v2
        with:
          repository: 'TEAMBLAWA/testing-server'
          path: 'reviewable-server'
          token: ${{ env.GITHUB_TOKEN || github.token }}
          ref: 'build-${{ steps.versions.outputs.SERVER_VERSION }}'
      - uses: actions/cache@v2
        with:
          path: 'reviewable-client/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - run: npm i -g yarn grunt-cli bower
        working-directory: ./reviewable-client
      - name: Install Client package dependencies
        working-directory: ./reviewable-client
        run: yarn install --pure-lockfile
      - name: Install Server package dependencies
        working-directory: ./reviewable-server
        run: yarn install --pure-lockfile
      - name: Install root bower dependencies
        working-directory: ./reviewable-client
        run: bower install --allow-root --force-latest
      - name: Install diff_worker bower dependencies
        working-directory: ./reviewable-client/diff_worker
        run: bower install --allow-root --force-latest
      - name: Install truss_worker bower dependencies
        working-directory: ./reviewable-client/truss_worker
        run: bower install --allow-root --force-latest
      - name: Build Client
        working-directory: ./reviewable-client
        run: NODE_ENV=production grunt dist-enterprise
      - name: Build Server
        working-directory: ./reviewable-server
        run: yarn build

      ####################################
      ## on release OR test deployment  ##
      ####################################
      - name: Update Dockerfile
        if: env.SHOULD_RELEASE == 'true'
        run: |
          GHE_VERSION_RANGE="$(echo "${{ steps.versions.outputs.GHE_VERSION_RANGE }}")"
          echo "ENV NODE_ENV=production REVIEWABLE_ENV=enterprise REVIEWABLE_VERSION=\"${{ steps.versions.outputs.SERVER_VERSION }}.${{ steps.versions.outputs.CLIENT_VERSION }}\" REVIEWABLE_MIN_VERSION=\"${{ steps.versions.outputs.MIN_SERVER_VERSION }}.${{ steps.versions.outputs.MIN_CLIENT_VERSION }}\" REVIEWABLE_GHE_VERSION_RANGE=\"$GHE_VERSION_RANGE\" REVIEWABLE_CLIENT_DIST=client-dist" >>Dockerfile
          sed -e 's|^|reviewable-server/|' ./reviewable-server/.dockerignore >>.dockerignore

      - name: Clone Enterprise Tools
        if: env.SHOULD_RELEASE == 'true'
        uses: actions/checkout@v2
        with:
          path: 'enterprise-tools'
          repository: 'TEAMBLAWA/test-enterprise-tools'
<<<<<<< HEAD
          token: ${{ env.GITHUB_TOKEN || github.token }}
=======
>>>>>>> 6c965d8 (update)

      - if: env.SHOULD_RELEASE == 'true'
        run: cp reviewable-client/rules_firecrypt.json enterprise-tools

      - working-directory: './enterprise-tools'
        run: ls

      - name: Committing changes
        if: env.SHOULD_RELEASE == 'true'
        id: commit_changes
        working-directory: './enterprise-tools'
        run: |
          if ! git diff --exit-code; then
            git config --local user.email "$GIT_CONFIG_NAME"
            git config --local user.name "$GIT_CONFIG_EMAIL"
            git add rules_firecrypt.json
            git commit -m 'Updated encryption rules'
            echo "::set-ouput name=CHANGES::true"
          fi

      - name: Pushing changes
        if: env.SHOULD_RELEASE == 'true' && steps.commit_changes.outputs.CHANGES == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ env.GITHUB_TOKEN || github.token }}
          directory: './enterprise-tools'
          branch: main
          repository: 'TEAMBLAWA/test-enterprise-tools'

      # - name: Assign BUILD_URL
      #   if: env.SHOULD_RELEASE == 'true'
      #   run: |
      #     echo "BUILD_URL=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_ENV
      #   something new
      # - name: Sentry release
      #   if: env.SHOULD_RELEASE == 'true'
      #   uses: getsentry/action-release@v1
      #   env:
      #     SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      #     SENTRY_PROJECT: ${{ env.SENTRY_PROJECT_ID }}
      #   with:
      #     sourcemaps: 'dist/static/js'
      #     environment: 'production'
      #     version: ${{ env.BUILD_GROUP_NUMBER }}
      #     set_commits: skip

      - name: Tagging release version
        if: env.SHOULD_RELEASE == 'true'
        uses: Reviewable/github-tag-action@v6.1
        with:
          custom_tag: '${{ env.BUILD_GROUP_NUMBER }}'
          tag_prefix: 'build-'
          custom_message: 'Build ${{ env.BUILD_GROUP_NUMBER }}, v${{ steps.versions.outputs.SERVER_VERSION }}.${{ steps.versions.outputs.CLIENT_VERSION }}'

      - name: Setup cloud SDK
        if: env.SHOULD_DEPLOY_TEST == 'true'
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: 'reviewable-dev-enterprise-test'
          service_account_key: ${{ secrets.SERVICE_ACCOUNT_CREDENTIALS }}
          export_default_credentials: true

      - name: Update app.yaml
        if: env.SHOULD_DEPLOY_TEST == 'true'
        run: |
          echo "Deploying test server..."

          echo "  REVIEWABLE_LICENSE: '$REVIEWABLE_LICENSE'" >>app.yaml
          echo "  REVIEWABLE_FIREBASE_AUTH: '$REVIEWABLE_FIREBASE_AUTH'" >>app.yaml
          echo "  REVIEWABLE_FIREBASE_PRIVATE_KEY: '$REVIEWABLE_FIREBASE_PRIVATE_KEY'" >>app.yaml
          echo "  REVIEWABLE_ENCRYPTION_PRIVATE_KEYS: '$REVIEWABLE_ENCRYPTION_PRIVATE_KEYS'" >>app.yaml
          echo "  REVIEWABLE_ENCRYPTION_AES_KEY: '$REVIEWABLE_ENCRYPTION_AES_KEY'" >>app.yaml
          echo "  REVIEWABLE_GITHUB_CLIENT_SECRET: '$REVIEWABLE_GITHUB_CLIENT_SECRET'" >>app.yaml
          echo "  AWS_SECRET_ACCESS_KEY: '$AWS_SECRET_ACCESS_KEY'" >>app.yaml

      - name: Deploy
        if: env.SHOULD_DEPLOY_TEST == 'true'
        uses: google-github-actions/deploy-appengine@main
        with:
          deliverables: app.yaml
          version: ${{ env.BUILD_GROUP_NUMBER }}

      - name: Deleting obsolete versions
        if: env.SHOULD_DEPLOY_TEST == 'true'
        uses: Reviewable/appengine-remove-action@v2
        with:
          limit: 5

      # - name: Gitter Notification
      #   if: always() && env.SHOULD_RELEASE == 'true'
      #   uses: fjogeleit/http-request-action@master
      #   with:
      #     url: ${{ secrets.GITTER_URL }}
      #     method: 'POST'
      #     data: ${{ steps.notify_on_failure.outputs.NOTIFICATION || steps.notify_on_success.outputs.NOTIFICATION  }}
      #     timeout: 15000
